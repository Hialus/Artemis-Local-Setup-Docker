name: Build and Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  generate-build-matrix:
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.generate.outputs.matrix }}
        matrix_variants: ${{ steps.generate.outputs.matrix_variants }}
        build_base_images: ${{ steps.generate.outputs.build_base_images }}
        build_variants: ${{ steps.generate.outputs.build_variants }} 
      steps:
        - name: Checkout
          uses: actions/checkout@v2
          with:
            fetch-depth: 2
        - name: generate
          id: generate
          run: |
            bash ./generate_build_matrix.sh

  check-matrix:
    runs-on: ubuntu-latest
    needs: generate-build-matrix
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml

      - name: Check matrix definition
        run: |
          echo -e "\u001b[32m** Generated matrices: **\u001b[0m"
          echo -e "################################"
          echo -e "\u001b[35mBase images:\u001b[0m"
          matrix='${{ needs.generate-build-matrix.outputs.matrix }}'
          echo -e "\u001b[36m[JSON]:\u001b[0m"
          echo -e $matrix | jq .
          echo -e "\u001b[36m[YAML]:\u001b[0m"
          echo -e $matrix | json2yaml
          echo -e "################################"
          echo -e "\u001b[35mVariants images:"
          matrix='${{ needs.generate-build-matrix.outputs.matrix_variants }}'
          echo -e "\u001b[36m[JSON]:\u001b[0m"
          echo -e $matrix | jq .
          echo -e "\u001b[36m[YAML]:\u001b[0m"
          echo -e $matrix | json2yaml
          echo -e "################################"
          echo -e "\u001b[32m** Build flags: **\u001b[0m"
          echo -e '\u001b[35mShould build base images:\u001b[0m ${{ needs.generate-build-matrix.outputs.build_base_images }}'
          echo -e '\u001b[35mShould build variants:\u001b[0m ${{ needs.generate-build-matrix.outputs.build_variants }}'

  buildx:
    name: Build and Push the Docker Images
    runs-on: ubuntu-latest

    needs: generate-build-matrix
    if: needs.generate-build-matrix.outputs.build_base_images == 'yes'

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-build-matrix.outputs.matrix) }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: artemis-${{ matrix.name }}
          restore-keys: |
            artemis-${{ matrix.name }}

      - name: Log into registry
        if: github.event_name != 'pull_request'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./${{ matrix.name }}
          file: ./${{ matrix.name }}/Dockerfile
          build-args: VERSION=${{ matrix.version }}
          platforms: linux/arm64/v8,linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/${{ github.event.repository.owner.login }}/artemis-${{ matrix.name }}:latest,ghcr.io/${{ github.event.repository.owner.login }}/artemis-${{ matrix.name }}:${{ matrix.version }}
          labels: runnumber=${{ github.run_id }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          echo "size was"
          du -hcs  /tmp/.buildx-cache
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          echo "size is"
          du -hcs  /tmp/.buildx-cache

  build-variants:
    name: Build and Push the Docker Images for the variants
    runs-on: ubuntu-latest

    needs: [ buildx, generate-build-matrix ]
    # Yes, the `always() &&` is needed in the `if` statement` below here.
    # There is an open issue about this on the GitHub runner's repository: https://github.com/actions/runner/issues/491
    #
    # TL;DR: If a job specified under `needs` is skipped, we would not continue here.
    # This means, if we want to build just a variant while skipping the base image, the build of the variant would be skipped.
    # Using `always() &&` here continues though.
    if: |
      always() &&
      !contains(needs.*.result, 'cancelled') &&
      !contains(needs.*.result, 'failure') &&
      needs.generate-build-matrix.outputs.build_variants == 'yes'

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-build-matrix.outputs.matrix_variants) }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: artemis-${{ matrix.name }}
          restore-keys: |
            artemis-${{ matrix.name }}

      - name: Log into registry
        if: github.event_name != 'pull_request'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./${{ matrix.name }}
          file: ./${{ matrix.name }}/Dockerfile
          build-args: |
            - VERSION=${{ matrix.version }}
            - OWNER=${{ github.event.repository.owner.login }}
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/${{ github.event.repository.owner.login }}/artemis-${{ matrix.name }}:latest,ghcr.io/${{ github.event.repository.owner.login }}/artemis-${{ matrix.name }}:${{ matrix.version }}
          labels: runnumber=${{ github.run_id }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          echo "size was"
          du -hcs  /tmp/.buildx-cache
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          echo "size is"
          du -hcs  /tmp/.buildx-cache
